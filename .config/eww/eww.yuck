(include "./powermenu.yuck")


(defwindow topbar
  :geometry (geometry 
    :x "0%"
    :y "0%"
    :width "99%"
    :anchor "top center")
    :stacking "bottom"
    :exclusive true
    :focusable false
    :namespace "eww"
  (box 
    :class "bar"
    (box 
      :space-evenly false
      :spacing 10
      (workspaces)
      (wifi)
    )
    (clock)
    (box
      :space-evenly false
      :spacing 7
      :halign "end"
      (audio)
      (temperature)
      (mem)
      (cpu)
      (battery)
    )
  )
)

(defvar wifi-interface "wlan0")
(defpoll network :interval "1s" "iwgetid -r")

(defwidget temperature [] 
  (box 
    :space-evenly false
    (image :image-height 20 :halign "end" :valign "center" :path "${EWW_CONFIG_DIR}/assets/temperature.svg")
    (bar 
      :value "${EWW_TEMPS["THINKPAD_CPU"]}"
      :c1 "${EWW_TEMPS["THINKPAD_CPU"] < 60 ? "bg-green" : "bg-red"}"
    )
  )
)

(defwidget wifi []
  (box
    :space-evenly false
    (eventbox
      :onclick "nm-connection-editor &"
      :cursor "pointer"
      (box
        :space-evenly false
        :class "bg-black rounded-lg px-2"
        (image :image-height 20 :halign "end" :valign "center" :path "${EWW_CONFIG_DIR}/assets/wifi.svg")
        (label :class "mx-1" :text network)
      )
    )
    (box
      :space-evenly false
      :class "mx-1 px-2 bg-black rounded-lg"
      (image :image-height 20 :halign "end" :valign "center" :path "${EWW_CONFIG_DIR}/assets/down.svg")
      (label 
        :class "ms-1"
        :text "${round(EWW_NET["wlan0"]["NET_DOWN"]/1024, 1)} KiB"
      )
    )
    (box
      :space-evenly false
      :class "mx-1 px-2 bg-black rounded-lg"
      (image :image-height 20 :halign "end" :valign "center" :path "${EWW_CONFIG_DIR}/assets/up.svg")
      (label 
        :class "ms-1"
        :text "${round(EWW_NET["wlan0"]["NET_UP"]/1024, 1)} KiB"
      )
    )
  )
)

(defpoll muted :interval "1s" "pamixer --get-mute")
(defwidget audio []
  (eventbox
      :onclick "pamixer --toggle-mute"
      :cursor "pointer"
      (image :image-height 20 :halign "end" :valign "center" :path "${EWW_CONFIG_DIR}/assets/${muted == "true" ? "sound-off.svg" : "sound-on.svg"}")
  )
)

(defwidget mem []
  (box
    :space-evenly false
    (image :image-height 20 :halign "end" :valign "center" :path "${EWW_CONFIG_DIR}/assets/mem.svg")
    (bar 
      :value "${EWW_RAM.used_mem / EWW_RAM.total_mem * 100}"
      :c1 "bg-red"
    )
  )
)

(defwidget cpu []
  (box
    :space-evenly false
    (image :image-height 20 :halign "end" :valign "center" :path "${EWW_CONFIG_DIR}/assets/cpu.svg")
    (bar 
      ;; :value "${EWW_CPU["avg"]}"
      :value 10
      :c1 "bg-yellow"
    )
  )
)

(defvar batteryThreshold 25)
(defwidget battery []
  (box
       :valign "center"
       :halign "end"
       :space-evenly false

    (image :image-height 20 :halign "end" :valign "center" :path "${EWW_CONFIG_DIR}/assets/${EWW_BATTERY["BAT0"].status == "Discharging" ? "battery.svg" : "bolt.svg"}")
    (bar 
      :value "${EWW_BATTERY["BAT0"].capacity}"
      :c1 "bg-green"
      :c2 "${EWW_BATTERY["BAT0"].capacity < batteryThreshold ? "bg-red" : "bg-gray"}"
    )
  )
)

(defvar barScalar 1.2)

(defwidget bar [value ?c1 ?c2]
  (box
    :class "ml-2"
    :space-evenly false
    (box
      :height 8
      :width "${round(value / barScalar, 0)}"
      :valign "center"
      :halign "end"
      :class "rounded-s-lg ${c1 == "" ? "bg-green": c1}"
    )
    (box
      :height 8
      :width "${round((100-value) / barScalar, 0) }"
      :valign "center"
      :halign "start"
      :class "rounded-e-lg ${c2 == "" ? "bg-gray": c2}"
    )
  )
)

(defwidget powerbutton []
  (eventbox
    :halign "end"
    :valign "center"
    :class "button text-color-yellow"
    :cursor "pointer"
    :width 30
    :height 30
    :onclick `eww open powermenu --screen 0`
    (label :text "ðŸ—²")
  )
)

(defvar workspaces "[{\"id\": 1,\"icon\": \"mail.svg\"},{\"id\": 2,\"icon\": \"code.svg\"},{\"id\": 3,\"icon\": \"web.svg\"},{\"id\": 4,\"icon\": \"terminal.svg\"},{\"id\": 5,\"icon\": \"beaker.svg\"},{\"id\": 6,\"icon\": \"book.svg\"},{\"id\": 7,\"icon\": \"settings.svg\"},{\"id\": 8,\"icon\": \"rocket.svg\"},{\"id\": 9,\"icon\": \"music.svg\"},{\"id\": 10,\"icon\": \"chat.svg\"}]")
(deflisten activeworkspace
           :initial 1
           `./utils/bin/hyprland_socket_listener workspace`
)

(defwidget workspaces [] 
  (box
    :halign "start"
    :valign "center"
    :space-evenly false
    (image :image-height 20 
           :halign "end" 
           :valign "center" 
           :class "bg-black rounded-lg p-2 bg-purple mx-2 "
           :path "${EWW_CONFIG_DIR}/assets/${workspaces[activeworkspace - 1].icon}"
    )
    (box
       :class "rounded-lg bg-black p-2"
       :space-evenly true
       (for workspace in workspaces
         (box
          :valign "center"
          :halign "center"
          :class "workspace-indicator ${activeworkspace == workspace.id ? "active" : ""}"
         )
       )
    )
  )
)

(defwidget clock []
  (box 
    :orientation "horizontal"
    :halign "center"
    :class "foo"
    (label
      :class "clock_time"
      :text {formattime(EWW_TIME, "%H:%M")}
    )
  )
)

